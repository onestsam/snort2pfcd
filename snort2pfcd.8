.\"
.\"SPDX-License-Identifier: BSD-2-Clause
.\"
.\"snort2pfcd
.\"Copyright (c) 2020 Samee Shahzada <onestsam@gmail.com>
.\"
.\"Based on snort2c
.\"Copyright (c) 2005 Antonio Benojar <zz.stalker@gmail.com>
.\"Copyright (c) 2002 Cedric Berger
.\"
.\"Expiretable functions from expiretable
.\"Copyright (c) 2005 Henrik Gustafsson <henrik.gustafsson@fnord.se>
.\"
.\"s2c_parse_line based in pfctl code (pfctl_radix.c)
.\"Copyright (c) Armin's Wolfermann
.\"
.\"s2c_pf_block functions are based
.\"on Armin's Wolfermann pftabled-1.03 functions.
.\"
.\"libcidr
.\"Copyright (c) 1996 Matthew D. Fuller
.\"
.\"Packet Filter
.\"Copyright (c) 2001 Daniel Hartmeier
.\"Copyright (c) 2002 - 2008 Henning Brauer
.\"Copyright (c) 2012 Gleb Smirnoff <glebius@FreeBSD.org>
.\"
.\"All rights reserved.
.\"
.\"Redistribution and use in source and binary forms, with or without
.\"modification, are permitted provided that the following conditions
.\"are met:
.\"
.\"   - Redistributions of source code must retain the above copyright
.\"     notice, this list of conditions and the following disclaimer.
.\"   - Redistributions in binary form must reproduce the above
.\"     copyright notice, this list of conditions and the following
.\"     disclaimer in the documentation and/or other materials provided
.\"     with the distribution.
.\"
.\"THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
.\""AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
.\"LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
.\"FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
.\"COPYRIGHT HOLDERS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
.\"INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
.\"BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
.\"LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
.\"CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
.\"LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
.\"ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
.\"POSSIBILITY OF SUCH DAMAGE.
.\"
.\"
.Dd Sept 5th, 2020
.Dt SNORT2PFCD 8
.Sh NAME
.Nm snort2pfcd
.Nd provides real-time blocking of ip addresses from snort alerts via packet filter firewall tables.
.Sh SYNOPSIS
.Nm snort2pfcd
.Op Fl e Ar External_Interface
.Op Fl w Ar Passlist_File
.Op Fl b Ar Blocklist_File
.Op Fl W
.Op Fl B
.Op Fl C
.Op Fl D
.Op Fl F
.Op Fl Z
.Op Fl l Ar Log_File
.Op Fl a Ar Alert_File
.Op Fl p Ar Priority
.Op Fl r Ar Repeat_Offenses
.Op Fl t Ar Seconds
.Op Fl d Ar Pf_device
.Op Fl q Ar Seconds
.Op Fl m Ar Thr_max
.Op Fl v
.Op Fl h
.Sh DESCRIPTION
.Nm
monitors snort alert output and blocks ip addresses for a given snort priority using packet filter table entries for a specified period of time. A passlist is specified to exclude local and trusted ip addresses from being blocked. 
.Nm
also preloads the community maintained and supplied snort blocklist by default. The passlist and blocklist files are monitored and
.Nm
automatically reloads and updates the tables when changes are made to these files. 
.Pp
The options are as follows:
.Bl -tag -width Ds
.It Fl e Ar External_Interface
external interface e.g. eth0 or "all" to passlist all interfaces, default is to passlist all interfaces.
.It Fl w Ar Passlist_File
passlist file, default is /usr/local/etc/snort/rules/iplists/default.passlist.
.It Fl W
If set, will prevent loading of any passlist file.
.It Fl b Ar Blocklist_File
blocklist file, default is /usr/local/etc/snort/rules/iplists/default.blocklist.
.It Fl B 
If set, will prevent loading of the snort blocklist file.
.It Fl C
If set, will enable debug mode for gdb, lldb, etc.
.It Fl D
If set, will disable the DNS lookup functionality.
.It Fl F
Foreground mode. If set, will not daemonize.
.It Fl Z
If set, will prevent the passlisting of entries in the /etc/resolv.conf file.
.It Fl l Ar Log_File
log file location, default is /var/log/snort2pfcd.log.
.It Fl a Ar Alert_File
snort alert file location, default is /var/log/snort/alert.
.It Fl p Ar Priority 
The priority level at which to block an ip addresses in the snort log. Default is 1. 
Lower priority includes higher priority, for example, -p 3 includes priorities 3, 2 and 1. 
.It Fl r Ar Repeat_Offenses
Number of times an ip address may commit an offense before being added to the packet filter block table. 
Default is 0. For example, -p 2 -r 2 specifies that any priority 1 or 2 snort alert for a given network address will be blocked only after 2 repeated snort alerts (3 snort alerts total). 
.It Fl t Ar Seconds 
The number of seconds to block an ip address, default is 60*60 or 1 hour.
.It Fl d Ar Pf_device
Packet filter device interface. Default is /dev/pf.
.It Fl q Ar Seconds
The number of seconds to wait before starting to parse the snort alert file. Useful if 
.Nm
is interfering with connection setup, especially shortly after boot. Default is 0.
.It Fl m Ar thr_max
Maximum number of DNS request threads. Default is 100.
.Nm
uses a non-blocking design to ensure that waiting for DNS names to resolve in the block log do not interfere with the blocking of snort alerts. Instead of the main program waiting, a new thread is spawned to do the waiting. Since connection speeds vary widely (100mb/s - >40Gb/s) and servers also vary in terms of processing capability, the option exists to increase or decrease the maximum number of threads waiting for DNS requests. Once the maximum number of threads waiting for a DNS response is reached, logging will stop until an active thread exits. The main program however will continue its blocking function with a cessation in logging until a new thread can be spawned. 
.It Fl v
Increase verbosity.
.It Fl h
Show help.
.El
.Sh THEORY OF OPERATION
The snort intrusion detection system monitors network traffic and will generate an alert if this traffic matches a rule for a type of noteworthy activity.
.Nm
monitors this alert file and can then add the offending ip address to a packet filter block table. 
.Nm
provides the above options for the user to specify the conditions under which the offending address is added to the packet filter block table.
.Pp
Differentiating between benign and malicious network traffic is difficult and, unfortunately, snort generates a fair amount of false-positives. Also, the snort IDS primary function is to log noteworthy network traffic and its authors did not necessarily intend for the logged addresses to be blocked. This being said, snorts rules are highly configurable and can be adjusted for more appropriate functioning in this context. To assist the user with filtering network traffic produced by various network entities, 
.Nm
will automatically resolve the offending ip address and display the DNS name in the 
.Nm
block log. Should the user decide that the offending address is trustworthy, the user can add the address, or alternatively, research and add the entire CIDR address block assigned to that network entity, to the passlist. Passlisted addresses or CIDR address blocks generating a snort alert will not be added to the packet filter block table.
.Pp
.Nm
also loads the snort community supplied blocklist file into a separate packet filter block table by default. Table entries are named "snort2pfcd" for dynamic entries which can be viewed with "pfctl -t snort2pfcd -T show". Static entries loaded from the community provided snort blocklist are populated within the "snort2pfcd_static" table which can be viewed with "pfctl -t snort2pfcd_static -T show".
.Pp
At no time should
.Nm
need to be restarted.
.Nm
will repopulate its packet filter tables if the packet filter is restarted. 
.Nm
also monitors the passlist and blocklist files for changes. Changes applied to these files are automatically reloaded and applied to the running
.Nm
processes.
.Sh FILES
.Sh Passlist
.Pp
Passlist entries can be single ip addressess (e.g. 192.168.0.1) or blocks of addresses in CIDR format (e.g. 192.168.0.0/24). Each entry should be on a separate line.
.Pp
.Sh Blocklist
.Pp
Blocklist entries provided by the snort community contain a list of single ip addresses and 
.Nm
will only accept entries in this format (e.g. 192.168.0.1). Each entry should be on a separate line.
.Sh NOTES
While
.Nm
will parse the default snort alert file, this can produce less than real-time blocking given the burden being placed on snort especially over an active, fast or low-latency connection. The author would strongly recommend using a spooler like barnyard2 to output the text alerts from the snort unified2 binary output.
.Pp
By default, the user-supplied passlist is prepended with the addresses of all of the local interfaces as the handling of these addresses are usually specified by more complex packet filter rules and simply blocking these addresses can cause problems with certain configurations.
.Pp
The user-supplied passlist can also be prepended with the address of the external interface only for paranoid configurations. Lo0 is always passlisted.
.Pp
.Nm
also automatically passlists addresses found within the /etc/resolv.conf file as these addresses should also be handled by specific packet filter rules.
.Pp
A static blocklist table is also maintained and populated within the packet filter firewall with the addresses found within the /usr/local/etc/snort/rules/iplists/default.blocklist file. These addresses can be supplied by the user or automatically populated with addresses supplied by the snort community.
.Sh CREDITS
This program is based on snort2c written by Antonio Benojar which was based on the original snort2pf perl script written by Stephan Schmieder. Expiration of entries use Henrik Gustafsson's expiretable functions. Blocking functionality based on pfctl and pftabled functions by Armin Wolfermann.
.Sh SEE ALSO
.Xr pf 4 ,
.Xr pfctl 8 ,
.Xr snort 8 ,
.Xr expiretable 1 ,
.Xr libcidr 3 ,
.Sh AUTHORS
Samee Shahzada <onestsam@gmail.com>
